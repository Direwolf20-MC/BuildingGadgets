buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '4.1.+', changing: true
    }
}

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: 'net.minecraftforge.gradle'

version = "$version"
group = 'com.direwolf20.buildinggadgets'
archivesBaseName = "buildinggadgets-${minecraft_version}"

def forge_major = forge_version.tokenize('.')[0]

// Used for CI/CD
def env = System.getenv()
if (env.GITHUB_RUN_NUMBER) {
    version = version + "-SNAPSHOT-" + "${env.GITHUB_RUN_NUMBER}"
}

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

minecraft {
    mappings channel: 'snapshot', version: "${mcp_mappings}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                buildinggadgets {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            mods {
                buildinggadgets {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'debug'
            args '--mod', 'buildinggadgets', '--all', '--output', file('src/generated/resources/')
            mods {
                buildinggadgets {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
//    maven {
//        url "https://dvs1.progwml6.com/files/maven"
//    }
    maven {
        url = "https://modmaven.dev/"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${minecraft_version}-${forge_version}"

    // JEI curse.maven:modurl-projectid:fileid
    compileOnly fg.deobf("mezz.jei:jei-${jei_version}:api")
    runtimeOnly fg.deobf("mezz.jei:jei-${jei_version}")

    // deobfCompile "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}:api"
    // deobfCompile "refinedstorage:refinedstorage:${rs_version}:api"
    // runtime "team.chisel.ctm:CTM:MC${minecraft_version}-${ctm_version}"
}

// Processes main only resources
processResources {
    inputs.property('version', project.version)
    inputs.property('forge_major', forge_major)

    from(sourceSets.main.resources.srcDirs) {
        include 'META-INF/mods.toml'
        expand 'version': project.version, 'forge_major': forge_major
    }

    from(sourceSets.main.resources.srcDirs) {
        exclude 'META-INF/mods.toml'
    }
}

jar {
    group = 'artifact'
    manifest {
        attributes(["Specification-Title"     : "BuildingGadgets",
                    "Specification-Version"   : forge_major, // We are version 1 of the modlauncher specification
                    "Implementation-Title"    : project.archivesBaseName,
                    "Implementation-Version"  : project.version,
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }

    from sourceSets.main.output
    dependsOn classes
}

task deobfJar(type: Jar) {
    from(sourceSets.main.output)
    archiveName = "${baseName}-${version}-deobf.${extension}"
}

task sourcesJar(type: Jar) {
    from(sourceSets.main.allSource)
    archiveName = "${baseName}-${version}-sources.${extension}"
}

artifacts {
    archives deobfJar
    archives sourcesJar
}
